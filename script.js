let version = "7.1";
const abortController = new AbortController();

document.addEventListener("alpine:init", () => {
  Alpine.store("config", {
    mainNation: localStorage.getItem("gotIssuesUserAgent") || "",
    puppets: localStorage.getItem("gotIssuesNations")
      ? JSON.parse(localStorage.getItem("gotIssuesNations"))
      : "",
    password: localStorage.getItem("gotIssuesCred") || "",
    multiplePasswords: localStorage.getItem("gotIssuesmultiplePasswords")
      ? JSON.parse(localStorage.getItem("gotIssuesmultiplePasswords"))
      : false,
    getUserAgent() {
      return `${this.mainNation} Gotissues Written by 9003, Email NSWA9002@gmail.com,discord: 9003, NSNation 9003`;
    },
    writeToStorage() {
      localStorage.setItem("gotIssuesNations", JSON.stringify(this.puppets));
      localStorage.setItem("gotIssuesCred", this.password);
      localStorage.setItem("gotIssuesUserAgent", this.mainNation);
      localStorage.setItem(
        "gotIssuesmultiplePasswords",
        this.multiplePasswords
      );
    },
  });
});

const issueIdsList = [];
let generatedContent = "";
let containerise_nation = "";
let containerise_container = "";

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

const progressParagraph = document.getElementById("progress");
progressParagraph.style.display = "block";

function handleDownload(mode) {
  let blob;
  if (containerise_container && containerise_nation) {
    blob = new Blob([containerise_container], { type: "text/txt"});
    urlObject(blob, "Containerise (Container)");
    blob = new Blob([containerise_nation], { type: "text/txt"});
    urlObject(blob, "Containerise (Nation)");
  } else {
    blob = new Blob([generatedContent], { type: "text/html"});
    urlObject(blob, mode);
  }
}

function urlObject(blob, mode) {
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.download = `${mode}.${['gotIssues', 'Login Sheet'].includes(mode) ? "html" : "txt"}`;
  link.click();
  window.URL.revokeObjectURL(url);
}

let currentNation = 0;
function openNextLink() {
  if (currentNation > issueIdsList.length - 1) {
    return;
  }
  const puppet = issueIdsList[currentNation];
  if (puppet.issues.length > 0) {
    document.getElementById("openNextButton").disabled = false;
    const issueUrl = `https://www.nationstates.net/container=${puppet.nation}/nation=${puppet.nation}/page=show_dilemma/dilemma=${puppet.issues[0]}/template-overall=none//User_agent=${Alpine.store("config").getUserAgent()}/Script=Gotissues/Author_Email=NSWA9002@gmail.com/Author_discord=9003/Author_main_nation=9003/`;
    window.open(issueUrl, "_blank");
    puppet.issues.shift();
  } else {
    currentNation++;
    openNextLink();
  }
}

async function nsIterator(main, puppets, mode) {
  puppets = puppets.split('\n')
  let buildString = ''
  for (let i = 0; i < puppets.length; i++) {
    let nation = puppets[i];
    if (nation.includes(",")) {
      nation = nation.substring(0, nation.indexOf(","));
    }
    const nation_formatted = nation.toLowerCase().replaceAll(" ", "_");
    if (mode === "Container Rules") {
      containerise_nation += `@^.*\\.nationstates\\.net/(.*/)?nation=${nation_formatted}(/.*)?$ , ${nation}\n`;
      containerise_container += `@^.*\\.nationstates\\.net/(.*/)?container=${nation_formatted}(/.*)?$ , ${nation}\n`;
    }
    if (mode === "Login Sheet") {
      buildString += `<tr><td><p>${i + 1} of ${
        puppets.length
      }</p></td><td><p><a target="_blank" href="https://www.nationstates.net/nation=${nation_formatted}/page=upload_flag/test=1/User_agent=${main}">Link to Nation</a></p></td></tr>`;
    }
  }
  if (mode === "Login Sheet") generatedContent = htmlContent(buildString)
  const progress = document.createElement("p");
  progress.textContent = `Finished processing`;
  progressParagraph.prepend(progress);
  handleDownload(mode)
}

async function gotIssues(main, puppets, password, format) {
  let userAgent = `${main} Gotissues Written by 9003, Email NSWA9002@gmail.com,discord: 9003, NSNation 9003`;
  puppets = puppets.split("\n");
  const parser = new DOMParser();
  for (let i = 0; i < puppets.length; i++) {
    let nation = puppets[i];
    if (format) {
      nation = puppets[i].split(",")[0];
      password = puppets[i].split(",")[1];
    } else if (nation.includes(",")) {
      nation = nation.substring(0, nation.indexOf(","));
    }
    if (abortController.signal.aborted) {
      break;
    }
    const nation_formatted = nation.toLowerCase().replaceAll(" ", "_");
    const progress = document.createElement("p");
    try {
      await sleep(700);
      progress.textContent = `Processing ${nation} ${i + 1}/${puppets.length}`;
      progressParagraph.prepend(progress);
      const response = await fetch(
        "https://www.nationstates.net/cgi-bin/api.cgi/?nation=" +
          nation +
          "&q=issues+packs",
        {
          method: "GET",
          headers: {
            "User-Agent": userAgent,
            "X-Password": password.replace(" ", "_"),
          },
        }
      );
      const xml = await response.text();
      const xmlDocument = parser.parseFromString(xml, "text/xml");
      const issueIds = xmlDocument.querySelectorAll("ISSUE");
      const packs = xmlDocument.querySelector("PACKS");
      const nationObj = {
        nation: nation_formatted,
        issues: [],
        packs: packs ? parseInt(packs.textContent) : 0,
      };
      issueIds.forEach((issue) => {
        nationObj.issues.push(issue.getAttribute("id"));
      });
      issueIdsList.push(nationObj);
    } catch (err) {
      progress.textContent = `Error processing ${nation} with ${err}`;
    }
  }
  const totalcount = issueIdsList.reduce(
    (count, puppet) => count + puppet.issues.length,
    0
  );
  const packcount = issueIdsList.reduce(
    (count, puppet) => count + puppet.packs,
    0
  );
  let issueCount = 0;
  let packCount = 0;
  let issueContent = "";
  let packContent = "";
  for (let i = 0; i < issueIdsList.length; i++) {
    const puppet = issueIdsList[i];
    for (let j = 0; j < puppet.issues.length; j++) {
      issueContent += `<tr><td><p>${
        issueCount + 1
      } of ${totalcount}</p></td><td><p><a target="_blank" href="https://www.nationstates.net/container=${
        puppet.nation
      }/nation=${puppet.nation}/page=show_dilemma/dilemma=${
        puppet.issues[j]
      }/template-overall=none//User_agent=${userAgent}/Script=Gotissues/Author_Email=NSWA9002@gmail.com/Author_discord=9003/Author_main_nation=9003/">Link to Issue</a></p></td></tr>`;
      issueCount++;
    }
    for (let j = 0; j < puppet.packs; j++) {
      packContent += `<tr><td><p>${
        packCount + 1
      } of ${packcount}</p></td><td><p><a target="_blank" href="https://www.nationstates.net/page=deck/nation=${
        puppet.nation
      }/container=${
        puppet.nation
      }/?open_loot_box=1/template-overall=none//User_agent=${userAgent}/Script=Gotissues/Author_Email=NSWA9002@gmail.com/Author_discord=9003/Author_main_nation=9003/autoclose=1">Link to Pack</a></p></td></tr>`;
      packCount++;
    }
  }
  issueContent += packContent;
  generatedContent = htmlContent(issueContent);
  const progress = document.createElement("p");
  progress.textContent = `Finished processing`;
  progressParagraph.prepend(progress);
  handleDownload("gotIssues")
}

const htmlContent = (content) => {
  return `
  <html>
  <head>
  <style>
  td.createcol p {
    padding-left: 10em;
  }

  a {
    text-decoration: none;
    color: black;
  }

  a:visited {
    color: grey;
  }

  table {
    border-collapse: collapse;
    display: table-cell;
    max-width: 100%;
    border: 1px solid darkorange;
  }

  tr, td {
    border-bottom: 1px solid darkorange;
  }

  td p {
    padding: 0.5em;
  }

  tr:hover {
    background-color: lightgrey;
  }
  </style>
  </head>
  <body>
  <table>
  ${content}
  <tr>
    <td>
      <p>
        <a target="_blank" href="https://this-page-intentionally-left-blank.org/">Done!</a>
      </p>
    </td>
    <td>
      <p>
        <a target="_blank" href="https://this-page-intentionally-left-blank.org/">Done!</a>
      </p>
    </td>
  </tr>
  </table>
  <script>
  document.querySelectorAll("td").forEach(function(el) {
    el.addEventListener("click", function() {
      const row = el.parentNode;
      row.nextElementSibling.querySelector("a").focus();
      row.parentNode.removeChild(row);
    });
  });
  </script>
  </body>
  </html>
  `;
};

window.addEventListener("beforeunload", () => {
  abortController.abort();
});